#!/bin/sh
set -e
# Makes sure the commit summary is 50 characters or less, and the body 72 or less
# Install into .git/hooks, make sure it's executable

# TODO: get another hook for pre-commit, so that you can diff the unmodified file and the new file, and compare, rather than try to (badly) work around the comments.
# And work around the fact that using git commit -F commit-msg.XXXX will _commit the default comments_ as part of the commit. OW.

# TODO: use printf instead of echo, to use --? Is it portable? Likewise for the rest.

COMMITMSG="$1"
FIRSTLINE=true
SECONDLINE=false
ONWARDS=false

diefrom() {
	COMMIT_TEMP=`mktemp ./commit-msg.XXXXX`
	cp $COMMITMSG $COMMIT_TEMP
	echo "Aborting commit due to $*" > /dev/stderr
	echo "Failed commit message saved in $COMMIT_TEMP" > /dev/stderr
	exit 1
}

while IFS='' read -r line
do
	if echo "$line" | grep -q "^#"; # Git comments MUST be first character
	then continue; fi
	if $FIRSTLINE;
	then
		FIRSTLINE=false
		SECONDLINE=true
		[ `echo -n "$line" | wc -c` -gt 50 ] && diefrom "summary text exceeding 50 characters."
	elif $SECONDLINE;
	then
		SECONDLINE=false
		ONWARDS=true
		[ `echo -n "$line" | wc -c` -gt 1 ] && diefrom "improperly delimited or empty body."
	elif $ONWARDS;
	then
		[ `echo -n "$line" | wc -c` -gt 72 ] && diefrom "body text exceeding 72 character limit."
	fi
done < "$COMMITMSG"

exit 0
